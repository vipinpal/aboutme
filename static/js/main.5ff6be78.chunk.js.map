{"version":3,"sources":["containers/MainMenu/MainMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","root1","marginBottom","media","height","paddingTop","grid","overflowX","chip","margin","backgroundColor","color","center","display","justifyContent","alignItems","RecipeReviewCard","classes","React","useState","Grid","container","item","xs","sm","xl","lg","md","Card","className","CardMedia","image","title","CardContent","style","fontSize","fontWeight","position","top","List","ListItem","ListItemAvatar","WorkRounded","ListItemText","primary","secondary","HomeRounded","EmailRounded","PhoneRounded","LaptopMacRounded","Chip","label","LanguageRounded","LinkedIn","GitHub","Twitter","paddingLeft","marginTop","marginLeft","createContext","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ff6be78.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Grid, Chip} from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport {\n    WorkRounded,\n    LanguageRounded,\n    HomeRounded,\n    EmailRounded,\n    PhoneRounded,\n    LaptopMacRounded,\n    LinkedIn,\n    GitHub,\n    Twitter,\n} from '@material-ui/icons';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 450,\n    },\n    root1: {\n        marginBottom: 30,\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n    grid: {\n        height: '95vh',\n        overflowX: 'hidden'\n    },\n    chip: {\n        margin: 5,\n        backgroundColor: '#009688',\n        color: '#fff',\n    },\n    center: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: 30,\n    }\n}));\n\nexport default function RecipeReviewCard() {\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(false);\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    return (\n        <Fragment>\n            <Grid\n                container\n            >\n                <Grid item xs={12} sm={6} xl={3} lg={3} md={3}>\n                    <Card className={classes.root}>\n                        <CardMedia\n                            className={classes.media}\n                            image=\"https://scontent-maa2-1.xx.fbcdn.net/v/t1.0-9/92848436_3004369792957899_2076351894292267008_o.jpg?_nc_cat=109&_nc_sid=8024bb&_nc_ohc=K6nkMxbhMHUAX85R2tT&_nc_ht=scontent-maa2-1.xx&oh=d4b5a2c332af7069088ab148c78e5198&oe=5EB6D615\"\n                            title=\"Vipin Kumar\"\n                        />\n                        <CardContent>\n                        <div style={{\n                                fontSize: 30,\n                                fontWeight: 600,\n                                position: 'relative',\n                                top: -60,\n                                height: 0,\n                                color: '#009688',\n                        }}> Vipin Kumar </div>\n                        <List className={classes.root}>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <WorkRounded style={{ color: '#009688' }}  />\n                                </ListItemAvatar>\n                                <ListItemText primary=\"Developer\" secondary=\"Techjini.com\" />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <HomeRounded style={{ color: '#009688' }} />\n                                </ListItemAvatar>\n                                <ListItemText primary=\"Bengaluru\" secondary=\"Dec 15, 2015\" />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <EmailRounded style={{ color: '#009688' }} />\n                                </ListItemAvatar>\n                                <ListItemText primary=\"vip1509ku@gmail.com\" />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <PhoneRounded style={{ color: '#009688' }} />\n                                </ListItemAvatar>\n                                <ListItemText primary=\"+91 - 8884702587\" />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <LaptopMacRounded style={{ color: '#009688' }} />\n                                </ListItemAvatar>\n                                <ListItemText primary=\"Skills\" />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar />\n                                    <ListItemText>\n                                    <Chip className={classes.chip} label={\"Javascript\"} />\n                                    <Chip className={classes.chip} label={\"Node.js\"} />\n                                    <Chip className={classes.chip} label={\"React.js\"} />\n                                    <Chip className={classes.chip} label={\"Angular.js\"} />\n                                    <Chip className={classes.chip} label={\"TypeScript\"} />\n                                    <Chip className={classes.chip} label={\"Html\"} />\n                                    <Chip className={classes.chip} label={\"Css\"} />\n                                    <Chip className={classes.chip} label={\"Aws\"} />\n                                    <Chip className={classes.chip} label={\"MongoDb\"} />\n                                    <Chip className={classes.chip} label={\"Redis\"} />\n                                    </ListItemText>\n                            </ListItem>\n                            <ListItem>\n                                <ListItemAvatar>\n                                    <LanguageRounded style={{ color: '#009688' }} />\n                                </ListItemAvatar>\n                                <ListItemText primary=\"Languages\" secondary=\"Hindi, English\"  />\n                            </ListItem>\n                        </List>\n                        <div className={classes.center}>\n                            <LinkedIn style={{ color: '#009688' }} />\n                            <GitHub style={{ color: '#009688' }} />\n                            <Twitter style={{ color: '#009688' }} />\n                        </div>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={12} sm={6} xl={9} lg={9} md={9} className={classes.grid}>\n                    <div style={{ backgroundColor: 'inherit', paddingLeft: 14 }}>\n                        <Card className={classes.root1}>\n                            <CardContent>\n                                <div style={{ color: '#009688', fontSize: 30, fontWeight: 400 }}>\n                                    <WorkRounded style={{ color: '#009688', fontSize: 40 }} />\n                                    <span style={{\n                                        position: 'absolute',\n                                        marginTop: 5,\n                                        marginLeft: 10,\n                                    }}>Work Experience</span>\n                                </div>\n                            </CardContent>\n                    </Card>\n                    </div>\n                </Grid>\n            </Grid>\n        </Fragment>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport MainDrawer from './containers/MainMenu/MainMenu';\n\n\nexport const Context = React.createContext({\n  name: 'Vipin Pal'\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainDrawer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}