{"version":3,"sources":["component/SideMenu/SideMenu.component.jsx","containers/SideMenu/SideMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","avatar","marginTop","name","display","textAlign","color","paddingRight","fontWeight","fontSize","large","width","spacing","height","mailIcon","justifyContent","alignContent","mailText","icons","position","bottom","SideMenuContent","props","classes","Grid","container","direction","justify","alignItems","item","className","Avatar","alt","src","Context","Consumer","value","xs","MailOutline","Tooltip","title","Facebook","LinkedIn","GitHub","root","drawer","breakpoints","up","flexShrink","menuButton","margin","drawerPaper","backgroundColor","content","flexGrow","hum","ResponsiveDrawer","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","aria-label","Hidden","smUp","implementation","Drawer","variant","anchor","open","onClose","paper","ModalProps","keepMounted","Provider","xsDown","IconButton","edge","onClick","createContext","App","SideMenu","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d0e7dea.chunk.js","sourcesContent":["import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Tooltip } from '@material-ui/core';\nimport { MailOutline, Facebook, LinkedIn, GitHub } from '@material-ui/icons';\nimport { Context } from './../../App';\n\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n    marginTop: 15,\n  },\n  name: {\n    display: 'block',\n    textAlign: 'center',\n    color: '#000',\n    paddingRight: '.3em',\n    marginTop: 15,\n    fontWeight: 700,\n    fontSize: 30,\n  },\n  large: {\n    width: theme.spacing(16),\n    height: theme.spacing(16),\n  },\n  mailIcon: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignContent: 'flex-end',\n    marginTop: 10\n  },\n  mailText: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignContent: 'flex-start',\n    marginTop: 8,\n  },\n  icons: {\n    position: 'absolute',\n    bottom: 20,\n  },\n}));\n\nfunction SideMenuContent(props) {\n  const classes = useStyles();\n\n  return (\n    <Grid\n    container\n    direction=\"row\"\n    justify=\"center\"\n    alignItems=\"center\"\n  >\n    <Grid item className={classes.avatar}>\n      <Avatar alt=\"Remy Sharp\" src=\"https://scontent-sin6-2.xx.fbcdn.net/v/t1.0-9/76199474_2679063768821838_8362746932463927296_o.jpg?_nc_cat=107&_nc_ohc=ZYTNM0fqjFYAX8JVfu5&_nc_ht=scontent-sin6-2.xx&oh=af06ff80016885be230ffe4f0ca7517c&oe=5ED1A160\" className={classes.large} />\n    </Grid>\n    <Context.Consumer>\n      {value =>\n      <Grid item xs={12} className={classes.name}>\n        {value.name}\n      </Grid>\n      }\n    </Context.Consumer>\n    <Grid item xs={4} className={classes.mailIcon}>\n      <MailOutline></MailOutline>\n    </Grid>\n    <Grid item xs={8} className={classes.mailText}>\n        vip1509ku@gmail.com\n    </Grid>\n    <Grid item xs={12} className={classes.icons}>\n        <div>\n            <Tooltip title='Facebook'>\n                <Facebook />\n            </Tooltip>\n            <Tooltip title='LinkedIn'>\n                <LinkedIn />\n            </Tooltip>\n            <Tooltip title='Github'>\n                <GitHub />\n            </Tooltip>\n        </div>\n    </Grid>\n  </Grid>\n  )\n}\n\nexport default SideMenuContent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport SideMenuContent from './../../component/SideMenu/SideMenu.component';\nimport { Context } from './../../App';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  menuButton: {\n    margin: theme.spacing(1),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n    position: \"absolute\",\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    backgroundColor: '#f2f3f7',\n  },\n  content: {\n    flexGrow: 1,\n  },\n  hum: {\n    display: 'flex',\n  },\n}));\n\nfunction ResponsiveDrawer(props) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  return (\n    <div className={classes.root}>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            <Context.Provider value={{name: 'vipin'}}>\n              <SideMenuContent />\n            </Context.Provider>\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            <SideMenuContent />\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <Hidden smUp implementation=\"css\" className={classes.hum}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Hidden>\n      </main>\n    </div>\n  );\n}\n\nResponsiveDrawer.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  container: PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element),\n};\n\nexport default ResponsiveDrawer;\n","import React from 'react';\nimport './App.css';\nimport SideMenu from './containers/SideMenu/SideMenu';\n\n\nexport const Context = React.createContext({\n  name: 'Vipin Pal'\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SideMenu />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}